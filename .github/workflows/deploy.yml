name: Deploy to Render

on:
  workflow_run:
    workflows: ["Sonar Analysis"]
    types:
      - completed

permissions:
  contents: write
  deployments: write
  statuses: write

jobs:
  deploy:
    if: ${{ github.event.workflow_run.conclusion == 'success' }}
    runs-on: ubuntu-latest

    steps:
      - name: Create GitHub Deployment
        id: create_deployment
        uses: chrnorm/deployment-action@v2
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          environment: production
          ref: main
          description: Production deployment to Render
          initial-status: pending
          transient-environment: false
          auto-inactive: true

      - name: Log Deployment ID
        run: 'echo "::notice::GitHub Deployment ID: ${{ steps.create_deployment.outputs.deployment_id }}"'

      - name: Trigger Render Deployment
        run: |
          curl -X POST ${{ secrets.RENDER_DEPLOY_HOOK }}

      - name: Wait for Render Deployment
        id: wait_deploy
        run: |
          echo 'Polling Render API for deployment status...'

          SERVICE_ID="${{ secrets.RENDER_SERVICE_ID }}"
          API_KEY="${{ secrets.RENDER_API_KEY }}"
          MAX_RETRIES=30
          SLEEP_SECONDS=10
          i=0
          status=""

          while [ $i -lt $MAX_RETRIES ]; do
            echo "Attempt $((i+1)) of $MAX_RETRIES..."

            response=$(curl -s -H "Authorization: Bearer $API_KEY" \
              https://api.render.com/v1/services/$SERVICE_ID/deploys)

            echo "::notice::Raw API response: $response"

            status=$(echo "$response" | jq -r '.[0].status // empty')

            if [ -z "$status" ]; then
              echo "::warning::No deployment found yet. Retrying in $SLEEP_SECONDS seconds..."
            else
              echo "::notice::Current Render status: $status"
            fi

            if [[ "$status" == "live" ]]; then
              echo "success=true" >> $GITHUB_OUTPUT
              break
            elif [[ "$status" == "failed" ]]; then
              echo "::error::Render deployment failed."
              echo "success=false" >> $GITHUB_OUTPUT
              break
            fi

            sleep $SLEEP_SECONDS
            ((i++))
          done

          if [ "$status" != "live" ] && [ "$status" != "failed" ]; then
            echo "::warning::Timed out waiting for deployment status."
            echo "success=false" >> $GITHUB_OUTPUT
